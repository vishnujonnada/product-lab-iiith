{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageAnnotation = () => {\n  _s();\n  const {\n    requestID\n  } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleImageClick = async image => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n      console.log(data.annotations);\n      se;\n      setAnnotations([]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleDoneClick = async () => {\n    const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: annotations\n      };\n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (response.ok) {\n          console.log(annotations.label);\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image => image.imageID === selectedImage.imageID ? {\n              ...image,\n              status: 'Annotated'\n            } : image);\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n  const handleAnnotationChange = updatedAnnotations => {\n    setAnnotations(updatedAnnotations);\n  };\n  const handleFilterChange = option => {\n    setFilterOption(option);\n  };\n  const filteredImages = filterOption === 'all' ? images : images.filter(image => image.status === filterOption);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-annotation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-filter\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filterOption,\n        onChange: e => handleFilterChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Unannotated\",\n          children: \"Unannotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Annotated\",\n          children: \"Annotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), filteredImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`,\n        onClick: () => handleImageClick(image),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${image.imageThumbnail}`,\n          alt: `Image ${image.imageID}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), image.status === 'Unannotated' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this)]\n      }, image.imageID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-section\",\n      children: [selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-image\",\n        children: /*#__PURE__*/_jsxDEV(AnnotateImage, {\n          image: `data:image/jpeg;base64,${selectedImage.base64Image}`,\n          onChangeAnnotations: handleAnnotationChange,\n          className: \"annotation-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-section\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Labels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"done-button\",\n          onClick: handleDoneClick,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: handleResetClick,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageAnnotation, \"/jiYzJl9KXF9I2c7psVMmqbhxGQ=\", false, function () {\n  return [useParams];\n});\n_c = ImageAnnotation;\nexport default ImageAnnotation;\nvar _c;\n$RefreshReg$(_c, \"ImageAnnotation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","AnnotateImage","jsxDEV","_jsxDEV","ImageAnnotation","_s","requestID","images","setImages","selectedImage","setSelectedImage","labels","setLabels","annotations","setAnnotations","filterOption","setFilterOption","fetchImages","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","handleImageClick","image","imageID","log","se","handleDoneClick","hasUndefinedLabels","some","a","label","undefined","alert","requestBody","ok","updatedImages","map","status","statusText","handleResetClick","handleAnnotationChange","updatedAnnotations","handleFilterChange","option","filteredImages","filter","className","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","imageThumbnail","alt","base64Image","onChangeAnnotations","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\n\nconst ImageAnnotation = () => {\n  const { requestID } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleImageClick = async (image) => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n      console.log(data.annotations);\n      se\n      setAnnotations([]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  const handleDoneClick = async () => {\n    const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n      \n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: annotations\n      };\n\n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n  \n        if (response.ok) {\n          console.log(annotations.label);\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image =>\n              image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n            );\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n  \n  \n\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n\n  const handleAnnotationChange = (updatedAnnotations) => {\n    setAnnotations(updatedAnnotations);\n  };\n\n  const handleFilterChange = (option) => {\n    setFilterOption(option);\n  };\n\n  const filteredImages = filterOption === 'all' ? images : images.filter((image) => image.status === filterOption);\n\n  return (\n    <div className=\"image-annotation-container\">\n      <div className=\"image-filter\">\n        <select value={filterOption} onChange={(e) => handleFilterChange(e.target.value)}>\n          <option value=\"all\">All</option>\n          <option value=\"Unannotated\">Unannotated</option>\n          <option value=\"Annotated\">Annotated</option>\n        </select>\n      </div>\n      <div className=\"image-list\">\n        <br></br>\n        {filteredImages.map((image) => (\n          <div\n            key={image.imageID}\n            className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n            onClick={() => handleImageClick(image)}\n          >\n            <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n            {image.status === 'Unannotated' ? (\n              <div className=\"button-circle red\"></div>\n            ) : (\n              <div className=\"button-circle green\"></div>\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"annotation-section\">\n        {selectedImage && (\n          <div className=\"selected-image\">\n            <AnnotateImage\n              image={`data:image/jpeg;base64,${selectedImage.base64Image}`}\n              onChangeAnnotations={handleAnnotationChange}\n              className=\"annotation-image\"\n            />\n          </div>\n        )}\n\n      <div className=\"label-section\">\n        <h3>Labels</h3>\n\n      </div>\n           \n\n        <div className=\"button-section\">\n          <button className=\"done-button\" onClick={handleDoneClick}>\n            Done\n          </button>\n          <button className=\"reset-button\" onClick={handleResetClick}>\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageAnnotation;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}