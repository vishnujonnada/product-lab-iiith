{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/annotate.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Stage, Layer, Image, Rect } from 'react-konva';\n// import useImage from 'use-image';\n// import { FaTrash } from 'react-icons/fa';\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [rectangles, setRectangles] = useState([]);\n//   const isDrawing = React.useRef(false);\n//   const [rectangleTexts, setRectangleTexts] = useState([]);\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     const x = e.evt.x;\n//     const y = e.evt.y;\n//     setRectangles([...rectangles, { x, y, width: 0, height: 0 }]);\n//     // console.log(`Box started: x=${x}, y=${y}`);\n//     setRectangles([...rectangles, { x, y, width: 0, height: 0 }]);\n//     setRectangleTexts([...rectangleTexts, '']);\n\n//   };\n\n//   const handleTextChange = (e, index) => {\n//     const newRectangleTexts = [...rectangleTexts];\n//     newRectangleTexts[index] = e.target.value;\n//     setRectangleTexts(newRectangleTexts);\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     const currentRect = rectangles[rectangles.length - 1];\n//     currentRect.width = e.evt.x - currentRect.x;\n//     currentRect.height = e.evt.y - currentRect.y;\n\n//     const newRectangles = rectangles.slice(0, rectangles.length - 1);\n//     newRectangles.push(currentRect);\n//     setRectangles(newRectangles);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {rectangles.map((rect, i) => (\n//           <Rect\n//             key={i}\n//             x={rect.x}\n//             y={rect.y}\n//             width={rect.width}\n//             height={rect.height}\n//             stroke=\"red\"\n//             strokeWidth={2}\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;\n\nimport React, { useState, useEffect } from 'react';\nimport { Stage, Layer, Image, Rect, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnnotateImage = _ref => {\n  _s();\n  let {\n    imageUrl,\n    classId = 0\n  } = _ref;\n  const [image] = useImage(imageUrl);\n  const [rectangles, setRectangles] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [selectedRectIndex, setSelectedRectIndex] = useState(null);\n  const rectRef = React.useRef();\n  const trRef = React.useRef();\n  useEffect(() => {\n    if (selectedId) {\n      // we need to attach transformer manually\n      trRef.current.nodes([rectRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedId]);\n  const handleMouseDown = e => {\n    const clickedOnEmpty = e.target === e.target.getStage();\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    if (clickedOnEmpty) {\n      setSelectedId(null);\n      const newRect = {\n        x: point.x,\n        y: point.y,\n        width: 0,\n        height: 0,\n        id: `rect${rectangles.length}`\n      };\n      setRectangles(rects => [...rects, newRect]);\n    }\n  };\n  const handleMouseMove = e => {\n    if (!selectedId) {\n      const stage = e.target.getStage();\n      const point = stage.getPointerPosition();\n      let lastRect = rectangles[rectangles.length - 1];\n      lastRect.width = point.x - lastRect.x;\n      lastRect.height = point.y - lastRect.y;\n      const rects = rectangles.slice();\n      rects[rectangles.length - 1] = lastRect;\n      setRectangles(rects);\n    }\n  };\n  const handleMouseUp = () => {\n    setSelectedRectIndex(null);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Stage, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      onMouseDown: handleMouseDown,\n      onMousemove: handleMouseMove,\n      onMouseup: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          image: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), rectangles.map((rect, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.id === selectedId ? 'green' : 'red',\n            draggable: true,\n            onClick: e => {\n              setSelectedId(rect.id);\n              setSelectedRectIndex(i);\n            },\n            ref: rect.id === selectedId ? rectRef : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), rect.id === selectedId && /*#__PURE__*/_jsxDEV(Transformer, {\n            ref: trRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 42\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AnnotateImage, \"eSwwzc9pPoj68zwiH3fGtJV/w7U=\", false, function () {\n  return [useImage];\n});\n_c = AnnotateImage;\nexport default AnnotateImage;\nvar _c;\n$RefreshReg$(_c, \"AnnotateImage\");","map":{"version":3,"names":["React","useState","useEffect","Stage","Layer","Image","Rect","Transformer","useImage","jsxDEV","_jsxDEV","Fragment","_Fragment","AnnotateImage","_ref","_s","imageUrl","classId","image","rectangles","setRectangles","selectedId","setSelectedId","selectedRectIndex","setSelectedRectIndex","rectRef","useRef","trRef","current","nodes","getLayer","batchDraw","handleMouseDown","e","clickedOnEmpty","target","getStage","stage","point","getPointerPosition","newRect","x","y","width","height","id","length","rects","handleMouseMove","lastRect","slice","handleMouseUp","children","window","innerWidth","innerHeight","onMouseDown","onMousemove","onMouseup","fileName","_jsxFileName","lineNumber","columnNumber","map","rect","i","fill","draggable","onClick","ref","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/annotate.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { Stage, Layer, Image, Rect } from 'react-konva';\n// import useImage from 'use-image';\n// import { FaTrash } from 'react-icons/fa';\n\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [rectangles, setRectangles] = useState([]);\n//   const isDrawing = React.useRef(false);\n//   const [rectangleTexts, setRectangleTexts] = useState([]);\n\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     const x = e.evt.x;\n//     const y = e.evt.y;\n//     setRectangles([...rectangles, { x, y, width: 0, height: 0 }]);\n//     // console.log(`Box started: x=${x}, y=${y}`);\n//     setRectangles([...rectangles, { x, y, width: 0, height: 0 }]);\n//     setRectangleTexts([...rectangleTexts, '']);\n\n\n//   };\n\n//   const handleTextChange = (e, index) => {\n//     const newRectangleTexts = [...rectangleTexts];\n//     newRectangleTexts[index] = e.target.value;\n//     setRectangleTexts(newRectangleTexts);\n//   };\n\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     const currentRect = rectangles[rectangles.length - 1];\n//     currentRect.width = e.evt.x - currentRect.x;\n//     currentRect.height = e.evt.y - currentRect.y;\n\n//     const newRectangles = rectangles.slice(0, rectangles.length - 1);\n//     newRectangles.push(currentRect);\n//     setRectangles(newRectangles);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {rectangles.map((rect, i) => (\n//           <Rect\n//             key={i}\n//             x={rect.x}\n//             y={rect.y}\n//             width={rect.width}\n//             height={rect.height}\n//             stroke=\"red\"\n//             strokeWidth={2}\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;\n\nimport React, { useState, useEffect } from 'react';\nimport { Stage, Layer, Image, Rect, Transformer } from 'react-konva';\nimport useImage from 'use-image';\n\nconst AnnotateImage = ({ imageUrl, classId = 0 }) => {\n  const [image] = useImage(imageUrl);\n  const [rectangles, setRectangles] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [selectedRectIndex, setSelectedRectIndex] = useState(null);\n  const rectRef = React.useRef();\n  const trRef = React.useRef();\n\n  useEffect(() => {\n    if (selectedId) {\n      // we need to attach transformer manually\n      trRef.current.nodes([rectRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedId]);\n\n  const handleMouseDown = (e) => {\n    const clickedOnEmpty = e.target === e.target.getStage();\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n\n    if (clickedOnEmpty) {\n      setSelectedId(null);\n      const newRect = {\n        x: point.x,\n        y: point.y,\n        width: 0,\n        height: 0,\n        id: `rect${rectangles.length}`,\n      };\n      setRectangles((rects) => [...rects, newRect]);\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (!selectedId) {\n      const stage = e.target.getStage();\n      const point = stage.getPointerPosition();\n      let lastRect = rectangles[rectangles.length - 1];\n      lastRect.width = point.x - lastRect.x;\n      lastRect.height = point.y - lastRect.y;\n      \n      const rects = rectangles.slice();\n      rects[rectangles.length - 1] = lastRect;\n      setRectangles(rects);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setSelectedRectIndex(null);\n  };\n\n  return (\n    <>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n      >\n        <Layer>\n          <Image image={image} />\n          {rectangles.map((rect, i) => (\n            <React.Fragment key={i}>\n              <Rect\n                x={rect.x}\n                y={rect.y}\n                width={rect.width}\n                height={rect.height}\n                fill={rect.id === selectedId ? 'green' : 'red'}\n                draggable\n                onClick={(e) => {\n                  setSelectedId(rect.id);\n                  setSelectedRectIndex(i);\n                }}\n                ref={rect.id === selectedId ? rectRef : null}\n              />\n              {rect.id === selectedId && <Transformer ref={trRef} />}\n            </React.Fragment>\n          ))}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default AnnotateImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}