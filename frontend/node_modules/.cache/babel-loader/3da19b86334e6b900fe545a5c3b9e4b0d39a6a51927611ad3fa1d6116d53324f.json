{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transformer = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Shape_1 = require(\"../Shape\");\nconst Rect_1 = require(\"./Rect\");\nconst Group_1 = require(\"../Group\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Global_1.Konva._global);\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n  rad += Util_1.Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util_1.Util.radToDeg(rad) % 360 + 360) % 360;\n  if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Global_1.Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n  return snapped;\n}\nclass Transformer extends Group_1.Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n    this._createElements();\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n  setNode(node) {\n    Util_1.Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n  setNodes() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n    const filteredNodes = nodes.filter(node => {\n      if (node.isAncestorOf(this)) {\n        Util_1.Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');\n        return false;\n      }\n      return true;\n    });\n    this._nodes = nodes = filteredNodes;\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n        this._resetTransformCache();\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n      this._proxyDrag(node);\n    });\n    this._resetTransformCache();\n    var elementsCreated = !!this.findOne('.top-left');\n    if (elementsCreated) {\n      this.update();\n    }\n    return this;\n  }\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n        if (otherNode.isDragging()) {\n          return;\n        }\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n  getNodes() {\n    return this._nodes || [];\n  }\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n    this._nodes = [];\n    this._resetTransformCache();\n  }\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n    this._clearCache('transform');\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n  __getNodeShape(node) {\n    let rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n    let relative = arguments.length > 2 ? arguments[2] : undefined;\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Global_1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Global_1.Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n  __getNodeRect() {\n    var node = this.getNode();\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Util_1.Transform();\n    tr.rotate(-Global_1.Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Global_1.Konva.getAngle(this.rotation())\n    };\n  }\n  getX() {\n    return this._getNodeRect().x;\n  }\n  getY() {\n    return this._getNodeRect().y;\n  }\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n  _createElements() {\n    this._createBack();\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n    this._createAnchor('rotater');\n  }\n  _createAnchor(name) {\n    var anchor = new Rect_1.Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Global_1.Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n  _createBack() {\n    var back = new Shape_1.Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(this.height()) - padding);\n        }\n        ctx.fillStrokeShape(this);\n      },\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n    this._proxyDrag(back);\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n    var attrs = this._getNodeRect();\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n    this._fire('transformstart', {\n      evt: e.evt,\n      target: this.getNode()\n    });\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e.evt,\n        target\n      });\n    });\n  }\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n      var oldRotation = Global_1.Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Global_1.Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n      this._fitNodesInto(shape, e);\n      return;\n    }\n    var shiftBehavior = this.shiftBehavior();\n    var keepProportion;\n    if (shiftBehavior === 'inverted') {\n      keepProportion = this.keepRatio() && !e.shiftKey;\n    } else if (shiftBehavior === 'none') {\n      keepProportion = this.keepRatio();\n    } else {\n      keepProportion = this.keepRatio() || e.shiftKey;\n    }\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Global_1.Konva.getAngle(this.rotation())\n    }, e);\n  }\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n      var node = this.getNode();\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n      this._movingAnchorName = null;\n    }\n  }\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n    const minSize = 1;\n    if (Util_1.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    if (Util_1.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Util_1.Transform();\n    t.rotate(Global_1.Konva.getAngle(this.rotation()));\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util_1.Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n    const baseSize = 10000000;\n    const oldTr = new Util_1.Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Util_1.Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n    this._nodes.forEach(node => {\n      var _a;\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Util_1.Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n    this.rotation(Util_1.Util._getRotation(newAttrs.rotation));\n    this._resetTransformCache();\n    this.update();\n    this.getLayer().batchDraw();\n  }\n  forceUpdate() {\n    this._resetTransformCache();\n    this.update();\n  }\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n  update() {\n    var _a;\n    var attrs = this._getNodeRect();\n    this.rotation(Util_1.Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util_1.Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n  isTransforming() {\n    return this._transforming;\n  }\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n    Group_1.Group.prototype.destroy.call(this);\n    this.detach();\n    this._removeEvents();\n    return this;\n  }\n  toObject() {\n    return Node_1.Node.prototype.toObject.call(this);\n  }\n  clone(obj) {\n    var node = Node_1.Node.prototype.clone.call(this, obj);\n    return node;\n  }\n  getClientRect() {\n    if (this.nodes().length > 0) {\n      return super.getClientRect();\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }\n}\nexports.Transformer = Transformer;\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util_1.Util.warn('enabledAnchors value should be an array');\n  }\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util_1.Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n  return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n(0, Global_2._registerNode)(Transformer);\nFactory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory_1.Factory.addGetterSetter(Transformer, 'flipEnabled', true, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderDash');\nFactory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'shiftBehavior', 'default');\nFactory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'node');\nFactory_1.Factory.addGetterSetter(Transformer, 'nodes');\nFactory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory_1.Factory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory_1.Factory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","Transformer","Util_1","require","Factory_1","Node_1","Shape_1","Rect_1","Group_1","Global_1","Validators_1","Global_2","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","Konva","_global","getCursor","anchorName","rad","Util","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","assign","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","Group","constructor","config","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","attachTo","node","setNode","warn","setNodes","_nodes","_getEventNamespace","_id","nodes","arguments","undefined","detach","filteredNodes","filter","isAncestorOf","useSingleNodeRotation","getAbsoluteRotation","forEach","onChange","_resetTransformCache","isDragging","additionalEvents","_attrsAffectingSize","prop","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","getNodes","getActiveAnchor","_movingAnchorName","off","_clearCache","_clearSelfAndDescendantCache","_getNodeRect","_getCache","__getNodeRect","__getNodeShape","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","Transform","rotate","minX","minY","maxX","maxY","max","invert","p","getX","getY","getWidth","getHeight","_createBack","name","_createAnchor","anchor","Rect","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","cursor","getStage","content","style","_cursorChange","add","back","Shape","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","anchorDragBoundFunc","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","shiftBehavior","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","bottomOffsetY","move","_removeEvents","getTransform","removeEventListener","newAttrs","oldAttrs","minSize","allowNegativeScale","flipEnabled","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","multiply","_a","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","getLayer","batchDraw","_getRotation","forceUpdate","_batchChangeChild","selector","enabledAnchors","resizeEnabled","anchorSize","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","isTransforming","stopTransform","destroy","prototype","call","toObject","Node","clone","obj","validateAnchors","val","Array","className","_registerNode","Factory","addGetterSetter","getBooleanValidator","getNumberValidator","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"sources":["/home/vishnapanyala/Desktop/myapp/node_modules/konva/lib/shapes/Transformer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transformer = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Shape_1 = require(\"../Shape\");\nconst Rect_1 = require(\"./Rect\");\nconst Group_1 = require(\"../Group\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Global_1.Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util_1.Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util_1.Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Global_1.Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nclass Transformer extends Group_1.Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util_1.Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        const filteredNodes = nodes.filter((node) => {\n            if (node.isAncestorOf(this)) {\n                Util_1.Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');\n                return false;\n            }\n            return true;\n        });\n        this._nodes = nodes = filteredNodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Global_1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Global_1.Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Util_1.Transform();\n        tr.rotate(-Global_1.Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Global_1.Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect_1.Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Global_1.Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape_1.Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e.evt, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e.evt, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Global_1.Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Global_1.Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var shiftBehavior = this.shiftBehavior();\n        var keepProportion;\n        if (shiftBehavior === 'inverted') {\n            keepProportion = this.keepRatio() && !e.shiftKey;\n        }\n        else if (shiftBehavior === 'none') {\n            keepProportion = this.keepRatio();\n        }\n        else {\n            keepProportion = this.keepRatio() || e.shiftKey;\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Global_1.Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util_1.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util_1.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Util_1.Transform();\n        t.rotate(Global_1.Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util_1.Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Util_1.Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Util_1.Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Util_1.Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util_1.Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util_1.Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util_1.Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group_1.Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node_1.Node.prototype.toObject.call(this);\n    }\n    clone(obj) {\n        var node = Node_1.Node.prototype.clone.call(this, obj);\n        return node;\n    }\n    getClientRect() {\n        if (this.nodes().length > 0) {\n            return super.getClientRect();\n        }\n        else {\n            return { x: 0, y: 0, width: 0, height: 0 };\n        }\n    }\n}\nexports.Transformer = Transformer;\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util_1.Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util_1.Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n(0, Global_2._registerNode)(Transformer);\nFactory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory_1.Factory.addGetterSetter(Transformer, 'flipEnabled', true, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'borderDash');\nFactory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory_1.Factory.addGetterSetter(Transformer, 'shiftBehavior', 'default');\nFactory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Transformer, 'node');\nFactory_1.Factory.addGetterSetter(Transformer, 'nodes');\nFactory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory_1.Factory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory_1.Factory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory_1.Factory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory_1.Factory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}