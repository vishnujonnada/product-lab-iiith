{"ast":null,"code":"// import React, { useState } from 'react';\n// import image from './as.png';\n\n// const ImageAnnotator = () => {\n//   const [boxes, setBoxes] = useState([]);\n//   const [startPoint, setStartPoint] = useState(null);\n\n//   const handleMouseDown = (e) => {\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n//     setStartPoint({ x, y });\n//   }\n\n//   const handleMouseUp = (e) => {\n//     if (!startPoint) return;\n\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n\n//     const newBox = {\n//       x: Math.min(startPoint.x, x),\n//       y: Math.min(startPoint.y, y),\n//       width: Math.abs(startPoint.x - x),\n//       height: Math.abs(startPoint.y - y),\n//     };\n\n//     setBoxes(prevBoxes => [...prevBoxes, newBox]);\n//     setStartPoint(null);\n//   }\n\n//   const [activeBox, setActiveBox] = useState(null);\n\n// const handleBoxClick = (boxIndex) => {\n//   setActiveBox(boxIndex);\n// };\n\n// const handleBoxDrag = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     x,\n//     y,\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// const handleBoxResize = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     width: Math.max(x - newBoxes[boxIndex].x, 10),\n//     height: Math.max(y - newBoxes[boxIndex].y, 10),\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// return (\n//   <div style={{ position: 'relative' }}>\n//     <img\n//       src={image}\n//       style={{ width: '100%' }}\n//       onMouseDown={handleMouseDown}\n//       onMouseUp={handleMouseUp}\n//     />\n\n//     {boxes.map((box, i) => (\n//       <div\n//         key={i}\n//         style={{\n//           position: 'absolute',\n//           border: '2px solid red',\n//           left: box.x,\n//           top: box.y,\n//           width: box.width,\n//           height: box.height,\n//           cursor: 'move',\n//         }}\n//         onClick={() => handleBoxClick(i)}\n//         onMouseDown={(e) => {\n//           e.stopPropagation();\n//           e.currentTarget.style.zIndex = '100';\n//         }}\n//         onMouseUp={(e) => {\n//           e.currentTarget.style.zIndex = 'auto';\n//         }}\n//         onMouseMove={(e) => {\n//           if (activeBox !== null) {\n//             handleBoxDrag(e, activeBox);\n//           }\n//         }}\n//       >\n//         <div\n//           style={{\n//             position: 'absolute',\n//             width: '10px',\n//             height: '10px',\n//             background: 'white',\n//             border: '2px solid red',\n//             right: 0,\n//             bottom: 0,\n//             cursor: 'se-resize',\n//           }}\n//           onMouseDown={(e) => {\n//             e.stopPropagation();\n//             e.currentTarget.style.zIndex = '100';\n//           }}\n//           onMouseUp={(e) => {\n//             e.currentTarget.style.zIndex = 'auto';\n//           }}\n//           onMouseMove={(e) => {\n//             if (activeBox !== null) {\n//               handleBoxResize(e, activeBox);\n//             }\n//           }}\n//         />\n//       </div>\n//     ))}\n//   </div>\n// );\n\n//   return (\n//     <div style={{ position: 'relative' }}>\n//       <img \n//         src={image} \n//         style={{ width: '100%' }} \n//         onMouseDown={handleMouseDown} \n//         onMouseUp={handleMouseUp} \n//       />\n\n//       {boxes.map((box, i) => (\n//         <div \n//           key={i}\n//           style={{\n//             position: 'absolute',\n//             border: '2px solid red',\n//             left: box.x,\n//             top: box.y,\n//             width: box.width,\n//             height: box.height,\n//           }}\n//         />\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotator;\n\n// import React, { useState, useCallback } from 'react';\n// import { Stage, Layer, Image, Line } from 'react-konva';\n// import useImage from 'use-image';\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [lines, setLines] = useState([]);\n//   const isDrawing = React.useRef(false);\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     // Add a new line with the initial point being the point where the mouse was clicked\n//     setLines([...lines, { points: [e.evt.x, e.evt.y], color: 'red' }]);\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     // Get the current line\n//     const currentLine = lines[lines.length - 1];\n//     // Append the current mouse position to the line's points\n//     currentLine.points = [...currentLine.points, e.evt.x, e.evt.y];\n//     // Replace the last line in the array\n//     const newLines = lines.slice(0, lines.length - 1);\n//     newLines.push(currentLine);\n//     setLines(newLines);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {lines.map((line, i) => (\n//           <Line\n//             key={i}\n//             points={line.points}\n//             stroke={line.color}\n//             strokeWidth={5}\n//             tension={0.5}\n//             lineCap=\"round\"\n//             globalCompositeOperation={\n//               line.color === 'red' ? 'source-over' : 'destination-out'\n//             }\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;","map":{"version":3,"names":[],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/annotate.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import image from './as.png';\n\n\n// const ImageAnnotator = () => {\n//   const [boxes, setBoxes] = useState([]);\n//   const [startPoint, setStartPoint] = useState(null);\n  \n//   const handleMouseDown = (e) => {\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n//     setStartPoint({ x, y });\n//   }\n\n//   const handleMouseUp = (e) => {\n//     if (!startPoint) return;\n\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n\n//     const newBox = {\n//       x: Math.min(startPoint.x, x),\n//       y: Math.min(startPoint.y, y),\n//       width: Math.abs(startPoint.x - x),\n//       height: Math.abs(startPoint.y - y),\n//     };\n\n//     setBoxes(prevBoxes => [...prevBoxes, newBox]);\n//     setStartPoint(null);\n//   }\n\n//   const [activeBox, setActiveBox] = useState(null);\n\n// const handleBoxClick = (boxIndex) => {\n//   setActiveBox(boxIndex);\n// };\n\n// const handleBoxDrag = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     x,\n//     y,\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// const handleBoxResize = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     width: Math.max(x - newBoxes[boxIndex].x, 10),\n//     height: Math.max(y - newBoxes[boxIndex].y, 10),\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// return (\n//   <div style={{ position: 'relative' }}>\n//     <img\n//       src={image}\n//       style={{ width: '100%' }}\n//       onMouseDown={handleMouseDown}\n//       onMouseUp={handleMouseUp}\n//     />\n\n//     {boxes.map((box, i) => (\n//       <div\n//         key={i}\n//         style={{\n//           position: 'absolute',\n//           border: '2px solid red',\n//           left: box.x,\n//           top: box.y,\n//           width: box.width,\n//           height: box.height,\n//           cursor: 'move',\n//         }}\n//         onClick={() => handleBoxClick(i)}\n//         onMouseDown={(e) => {\n//           e.stopPropagation();\n//           e.currentTarget.style.zIndex = '100';\n//         }}\n//         onMouseUp={(e) => {\n//           e.currentTarget.style.zIndex = 'auto';\n//         }}\n//         onMouseMove={(e) => {\n//           if (activeBox !== null) {\n//             handleBoxDrag(e, activeBox);\n//           }\n//         }}\n//       >\n//         <div\n//           style={{\n//             position: 'absolute',\n//             width: '10px',\n//             height: '10px',\n//             background: 'white',\n//             border: '2px solid red',\n//             right: 0,\n//             bottom: 0,\n//             cursor: 'se-resize',\n//           }}\n//           onMouseDown={(e) => {\n//             e.stopPropagation();\n//             e.currentTarget.style.zIndex = '100';\n//           }}\n//           onMouseUp={(e) => {\n//             e.currentTarget.style.zIndex = 'auto';\n//           }}\n//           onMouseMove={(e) => {\n//             if (activeBox !== null) {\n//               handleBoxResize(e, activeBox);\n//             }\n//           }}\n//         />\n//       </div>\n//     ))}\n//   </div>\n// );\n\n\n//   return (\n//     <div style={{ position: 'relative' }}>\n//       <img \n//         src={image} \n//         style={{ width: '100%' }} \n//         onMouseDown={handleMouseDown} \n//         onMouseUp={handleMouseUp} \n//       />\n\n//       {boxes.map((box, i) => (\n//         <div \n//           key={i}\n//           style={{\n//             position: 'absolute',\n//             border: '2px solid red',\n//             left: box.x,\n//             top: box.y,\n//             width: box.width,\n//             height: box.height,\n//           }}\n//         />\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotator;\n\n\n// import React, { useState, useCallback } from 'react';\n// import { Stage, Layer, Image, Line } from 'react-konva';\n// import useImage from 'use-image';\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [lines, setLines] = useState([]);\n//   const isDrawing = React.useRef(false);\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     // Add a new line with the initial point being the point where the mouse was clicked\n//     setLines([...lines, { points: [e.evt.x, e.evt.y], color: 'red' }]);\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     // Get the current line\n//     const currentLine = lines[lines.length - 1];\n//     // Append the current mouse position to the line's points\n//     currentLine.points = [...currentLine.points, e.evt.x, e.evt.y];\n//     // Replace the last line in the array\n//     const newLines = lines.slice(0, lines.length - 1);\n//     newLines.push(currentLine);\n//     setLines(newLines);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {lines.map((line, i) => (\n//           <Line\n//             key={i}\n//             points={line.points}\n//             stroke={line.color}\n//             strokeWidth={5}\n//             tension={0.5}\n//             lineCap=\"round\"\n//             globalCompositeOperation={\n//               line.color === 'red' ? 'source-over' : 'destination-out'\n//             }\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;\n\n"],"mappings":"AAAA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}