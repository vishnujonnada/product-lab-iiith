{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageAnnotation = () => {\n  _s();\n  const {\n    requestID\n  } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleImageClick = async image => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n      setAnnotations([]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleLabelToggle = label => {\n    const updatedAnnotations = [...annotations];\n    const selectedImageAnnotations = updatedAnnotations.find(a => a.imageID === selectedImage.imageID);\n    if (selectedImageAnnotations) {\n      const labelIndex = selectedImageAnnotations.labels.findIndex(l => l.id === label.id);\n      if (labelIndex !== -1) {\n        selectedImageAnnotations.labels.splice(labelIndex, 1);\n      } else {\n        selectedImageAnnotations.labels.push(label);\n      }\n    } else {\n      updatedAnnotations.push({\n        imageID: selectedImage.imageID,\n        labels: [label]\n      });\n    }\n    setAnnotations(updatedAnnotations);\n  };\n\n  // const handleDoneClick = () => {\n  //   const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n  //   if (hasUndefinedLabels) {\n  //     alert('Please add all labels before submitting.');\n  //   } else {\n  //     // Perform logic to save selected labels for the selected image\n  //     console.log('Annotations:', annotations);\n\n  //     if (selectedImage) {\n  //       const updatedImages = images.map(image =>\n  //         image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n  //       );\n  //       setImages(updatedImages);\n  //     }\n  //   }\n  // };\n\n  const handleDoneClick = async () => {\n    const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: annotations.map(a => ({\n          id: a.id,\n          label: a.labels,\n          coordinates: a.coordinates\n        }))\n      };\n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (response.ok) {\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image => image.imageID === selectedImage.imageID ? {\n              ...image,\n              status: 'Annotated'\n            } : image);\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n  const handleAnnotationChange = updatedAnnotations => {\n    setAnnotations(updatedAnnotations);\n  };\n  const handleFilterChange = option => {\n    setFilterOption(option);\n  };\n  const filteredImages = filterOption === 'all' ? images : images.filter(image => image.status === filterOption);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-annotation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-filter\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filterOption,\n        onChange: e => handleFilterChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Unannotated\",\n          children: \"Unannotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Annotated\",\n          children: \"Annotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), filteredImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`,\n        onClick: () => handleImageClick(image),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${image.imageThumbnail}`,\n          alt: `Image ${image.imageID}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), image.status === 'Unannotated' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }, this)]\n      }, image.imageID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-section\",\n      children: [selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-image\",\n        children: /*#__PURE__*/_jsxDEV(AnnotateImage, {\n          image: `data:image/jpeg;base64,${selectedImage.base64Image}`,\n          onChangeAnnotations: handleAnnotationChange,\n          className: \"annotation-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Labels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), labels && labels.map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `label ${annotations.some(a => a.labels.some(l => l.id === label.id)) ? 'selected' : ''}`,\n          onClick: () => handleLabelToggle(label),\n          children: label.name\n        }, label.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"done-button\",\n          onClick: handleDoneClick,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: handleResetClick,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageAnnotation, \"/jiYzJl9KXF9I2c7psVMmqbhxGQ=\", false, function () {\n  return [useParams];\n});\n_c = ImageAnnotation;\nexport default ImageAnnotation;\nvar _c;\n$RefreshReg$(_c, \"ImageAnnotation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","AnnotateImage","jsxDEV","_jsxDEV","ImageAnnotation","_s","requestID","images","setImages","selectedImage","setSelectedImage","labels","setLabels","annotations","setAnnotations","filterOption","setFilterOption","fetchImages","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","handleImageClick","image","imageID","handleLabelToggle","label","updatedAnnotations","selectedImageAnnotations","find","a","labelIndex","findIndex","l","id","splice","push","handleDoneClick","hasUndefinedLabels","some","undefined","alert","log","requestBody","map","coordinates","ok","updatedImages","status","statusText","handleResetClick","handleAnnotationChange","handleFilterChange","option","filteredImages","filter","className","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","imageThumbnail","alt","base64Image","onChangeAnnotations","name","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\n\nconst ImageAnnotation = () => {\n  const { requestID } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleImageClick = async (image) => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n      setAnnotations([]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleLabelToggle = (label) => {\n    const updatedAnnotations = [...annotations];\n    const selectedImageAnnotations = updatedAnnotations.find(a => a.imageID === selectedImage.imageID);\n\n    if (selectedImageAnnotations) {\n      const labelIndex = selectedImageAnnotations.labels.findIndex(l => l.id === label.id);\n      if (labelIndex !== -1) {\n        selectedImageAnnotations.labels.splice(labelIndex, 1);\n      } else {\n        selectedImageAnnotations.labels.push(label);\n      }\n    } else {\n      updatedAnnotations.push({\n        imageID: selectedImage.imageID,\n        labels: [label]\n      });\n    }\n\n    setAnnotations(updatedAnnotations);\n  };\n\n  // const handleDoneClick = () => {\n  //   const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n  //   if (hasUndefinedLabels) {\n  //     alert('Please add all labels before submitting.');\n  //   } else {\n  //     // Perform logic to save selected labels for the selected image\n  //     console.log('Annotations:', annotations);\n  \n  //     if (selectedImage) {\n  //       const updatedImages = images.map(image =>\n  //         image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n  //       );\n  //       setImages(updatedImages);\n  //     }\n  //   }\n  // };\n\n  const handleDoneClick = async () => {\n    const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n      \n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: annotations.map(a => ({\n          id: a.id,\n          label: a.labels,\n          coordinates: a.coordinates\n        }))\n      };\n\n      \n  \n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n  \n        if (response.ok) {\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image =>\n              image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n            );\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n  \n  \n\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n\n  const handleAnnotationChange = (updatedAnnotations) => {\n    setAnnotations(updatedAnnotations);\n  };\n\n  const handleFilterChange = (option) => {\n    setFilterOption(option);\n  };\n\n  const filteredImages = filterOption === 'all' ? images : images.filter((image) => image.status === filterOption);\n\n  return (\n    <div className=\"image-annotation-container\">\n      <div className=\"image-filter\">\n        <select value={filterOption} onChange={(e) => handleFilterChange(e.target.value)}>\n          <option value=\"all\">All</option>\n          <option value=\"Unannotated\">Unannotated</option>\n          <option value=\"Annotated\">Annotated</option>\n        </select>\n      </div>\n      <div className=\"image-list\">\n        <br></br>\n        {filteredImages.map((image) => (\n          <div\n            key={image.imageID}\n            className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n            onClick={() => handleImageClick(image)}\n          >\n            <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n            {image.status === 'Unannotated' ? (\n              <div className=\"button-circle red\"></div>\n            ) : (\n              <div className=\"button-circle green\"></div>\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"annotation-section\">\n        {selectedImage && (\n          <div className=\"selected-image\">\n            <AnnotateImage\n              image={`data:image/jpeg;base64,${selectedImage.base64Image}`}\n              onChangeAnnotations={handleAnnotationChange}\n              className=\"annotation-image\"\n            />\n          </div>\n        )}\n\n        <div className=\"label-section\">\n          <h3>Labels</h3>\n          {labels && labels.map((label) => (\n            <div\n              key={label.id}\n              className={`label ${annotations.some(a => a.labels.some(l => l.id === label.id)) ? 'selected' : ''}`}\n              onClick={() => handleLabelToggle(label)}\n            >\n              {label.name}\n            </div>\n          ))}\n        </div>\n        <div className=\"button-section\">\n          <button className=\"done-button\" onClick={handleDoneClick}>\n            Done\n          </button>\n          <button className=\"reset-button\" onClick={handleResetClick}>\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageAnnotation;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}