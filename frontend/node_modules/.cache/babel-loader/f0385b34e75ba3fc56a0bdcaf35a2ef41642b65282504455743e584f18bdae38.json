{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/PrivateRoutes.js\";\nimport { useEffect } from 'react';\nimport { Outlet, Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoutes = () => {\n  const userEmail = localStorage.getItem('userEmail');\n  // Add your authentication logic here to check if the userEmail is valid\n  const isValidUser = userEmail !== null && userEmail !== '';\n  console.log(userEmail);\n  console.log(isValidUser);\n\n  // Redirect to the login page if the user is not valid\n  if (!isValidUser) {\n    // You can replace '/login' with the appropriate login route in your application\n    // You may also pass state or query parameters to the login route if needed\n    Navigate('/login');\n  }\n  if (isValidUser) {\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = PrivateRoutes;\nexport default PrivateRoutes;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"names":["useEffect","Outlet","Navigate","jsxDEV","_jsxDEV","PrivateRoutes","userEmail","localStorage","getItem","isValidUser","console","log","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/PrivateRoutes.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { Outlet, Navigate } from 'react-router-dom';\n\nconst PrivateRoutes = () => {\n\n    const userEmail = localStorage.getItem('userEmail');\n    // Add your authentication logic here to check if the userEmail is valid\n    const isValidUser = userEmail !== null && userEmail !== '';\n    console.log(userEmail);\n    console.log(isValidUser);\n\n    // Redirect to the login page if the user is not valid\n    if (!isValidUser) {\n      // You can replace '/login' with the appropriate login route in your application\n      // You may also pass state or query parameters to the login route if needed\n      Navigate('/login');\n    }\n\n  if (isValidUser) {\n    return <Outlet />;\n  } else {\n    return <Navigate to=\"/login\" />;\n  }\n};\n\nexport default PrivateRoutes;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAExB,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD;EACA,MAAMC,WAAW,GAAGH,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,EAAE;EAC1DI,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;EACtBI,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;;EAExB;EACA,IAAI,CAACA,WAAW,EAAE;IAChB;IACA;IACAP,QAAQ,CAAC,QAAQ,CAAC;EACpB;EAEF,IAAIO,WAAW,EAAE;IACf,oBAAOL,OAAA,CAACH,MAAM;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB,CAAC,MAAM;IACL,oBAAOX,OAAA,CAACF,QAAQ;MAACc,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;AACF,CAAC;AAACE,EAAA,GApBIZ,aAAa;AAsBnB,eAAeA,aAAa;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}