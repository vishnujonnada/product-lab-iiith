{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/annotate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ReactPictureAnnotation } from 'react-picture-annotation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnnotateImage = () => {\n  _s();\n  const [pageSize, setPageSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [annotations, setAnnotations] = useState([]);\n  const [selectedBox, setSelectedBox] = useState(null); // New state to store the selected box\n\n  const onResize = () => {\n    setPageSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n  const onSelect = selectedId => {\n    const selectedAnnotation = annotations.find(annotation => annotation.id === selectedId);\n    if (selectedAnnotation) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = selectedAnnotation.position;\n      const x_center = x + width / 2;\n      const y_center = y + height / 2;\n      setSelectedBox([x_center, y_center, width, height]);\n    }\n  };\n  const onChange = data => {\n    setAnnotations(data);\n  };\n  const handleDeleteBox = id => {\n    const updatedAnnotations = annotations.filter(annotation => annotation.id !== id);\n    setAnnotations(updatedAnnotations);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AnnotateImage\",\n    children: [/*#__PURE__*/_jsxDEV(ReactPictureAnnotation, {\n      image: \"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n      ,\n      onSelect: onSelect,\n      onChange: onChange,\n      width: pageSize.width,\n      height: pageSize.height,\n      annotations: annotations,\n      renderAnnotation: _ref => {\n        let {\n          annotation\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: annotation.position.x,\n            top: annotation.position.y\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: annotation.content,\n            onChange: e => {\n              const updatedAnnotations = [...annotations];\n              const index = updatedAnnotations.findIndex(a => a.id === annotation.id);\n              updatedAnnotations[index].content = e.target.value;\n              setAnnotations(updatedAnnotations);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteBox(annotation.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), selectedBox && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Normalized [x_center, y_center, width, height]:\", JSON.stringify(selectedBox)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(AnnotateImage, \"3XIrYoJdLLUTzmbvMPk84G46FIw=\");\n_c = AnnotateImage;\nexport default AnnotateImage;\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//     console.log(getYoloAnnotations(data));\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getYoloAnnotations = (data) => {\n//     return data\n//       .map(({ geometry, content }) => {\n//         if (!geometry) return ''; // Add null check for geometry\n\n//         const { x, y, width, height } = geometry;\n\n//         const normalizedX = x / pageSize.width;\n//         const normalizedY = y / pageSize.height;\n//         const normalizedWidth = width / pageSize.width;\n//         const normalizedHeight = height / pageSize.height;\n\n//         return `${content} ${normalizedX} ${normalizedY} ${normalizedWidth} ${normalizedHeight}`;\n//       })\n//       .join('\\n');\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n//   const [showAnnotations, setShowAnnotations] = useState(false);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getAnnotationYoloFormat = (annotation) => {\n//     if (!annotation.position) return ''; // Add null check for position\n\n//     const { x, y, width, height } = annotation.position;\n\n//     const x_center = (x + width / 2) / pageSize.width;\n//     const y_center = (y + height / 2) / pageSize.height;\n//     const normalizedWidth = width / pageSize.width;\n//     const normalizedHeight = height / pageSize.height;\n\n//     return `${annotation.id} [${x_center.toFixed(4)}, ${y_center.toFixed(4)}, ${normalizedWidth.toFixed(4)}, ${normalizedHeight.toFixed(4)}]`;\n//   };\n\n//   const handleShowAnnotations = () => {\n//     setShowAnnotations(!showAnnotations);\n//     // setShowAnnotations((prevShowAnnotations) => !prevShowAnnotations);\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderContent={({ annotation }) => (\n//           <div>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <div>{getAnnotationYoloFormat(annotation)}</div>\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//       <button onClick={handleShowAnnotations}>{showAnnotations ? 'Hide Annotations' : 'Show Annotations'}</button>\n//       { (\n//         <div>\n//           <h2>All Annotations:</h2>\n//           <ul>\n//             {annotations.map((annotation) => (\n//               <li key={annotation.id}>{getAnnotationYoloFormat(annotation)}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\nvar _c;\n$RefreshReg$(_c, \"AnnotateImage\");","map":{"version":3,"names":["React","useState","useEffect","ReactPictureAnnotation","jsxDEV","_jsxDEV","AnnotateImage","_s","pageSize","setPageSize","width","window","innerWidth","height","innerHeight","annotations","setAnnotations","selectedBox","setSelectedBox","onResize","addEventListener","removeEventListener","onSelect","selectedId","selectedAnnotation","find","annotation","id","x","y","position","x_center","y_center","onChange","data","handleDeleteBox","updatedAnnotations","filter","className","children","image","renderAnnotation","_ref","style","left","top","type","value","content","e","index","findIndex","a","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/annotate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ReactPictureAnnotation } from 'react-picture-annotation';\n\nconst AnnotateImage = () => {\n  const [pageSize, setPageSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [annotations, setAnnotations] = useState([]);\n  const [selectedBox, setSelectedBox] = useState(null); // New state to store the selected box\n\n  const onResize = () => {\n    setPageSize({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  const onSelect = (selectedId) => {\n    const selectedAnnotation = annotations.find((annotation) => annotation.id === selectedId);\n    if (selectedAnnotation) {\n      const { x, y, width, height } = selectedAnnotation.position;\n      const x_center = x + width / 2;\n      const y_center = y + height / 2;\n      setSelectedBox([x_center, y_center, width, height]);\n    }\n  };\n\n  const onChange = (data) => {\n    setAnnotations(data);\n  };\n\n  const handleDeleteBox = (id) => {\n    const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n    setAnnotations(updatedAnnotations);\n  };\n\n  return (\n    <div className=\"AnnotateImage\">\n      <ReactPictureAnnotation\n        image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n        onSelect={onSelect}\n        onChange={onChange}\n        width={pageSize.width}\n        height={pageSize.height}\n        annotations={annotations}\n        renderAnnotation={({ annotation }) => (\n          <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n            <input\n              type=\"text\"\n              value={annotation.content}\n              onChange={(e) => {\n                const updatedAnnotations = [...annotations];\n                const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n                updatedAnnotations[index].content = e.target.value;\n                setAnnotations(updatedAnnotations);\n              }}\n            />\n            <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n          </div>\n        )}\n      />\n      {selectedBox && (\n        <div>\n          Normalized [x_center, y_center, width, height]:\n          {JSON.stringify(selectedBox)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AnnotateImage;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//     console.log(getYoloAnnotations(data));\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getYoloAnnotations = (data) => {\n//     return data\n//       .map(({ geometry, content }) => {\n//         if (!geometry) return ''; // Add null check for geometry\n\n//         const { x, y, width, height } = geometry;\n\n//         const normalizedX = x / pageSize.width;\n//         const normalizedY = y / pageSize.height;\n//         const normalizedWidth = width / pageSize.width;\n//         const normalizedHeight = height / pageSize.height;\n\n//         return `${content} ${normalizedX} ${normalizedY} ${normalizedWidth} ${normalizedHeight}`;\n//       })\n//       .join('\\n');\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n//   const [showAnnotations, setShowAnnotations] = useState(false);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getAnnotationYoloFormat = (annotation) => {\n//     if (!annotation.position) return ''; // Add null check for position\n\n//     const { x, y, width, height } = annotation.position;\n\n//     const x_center = (x + width / 2) / pageSize.width;\n//     const y_center = (y + height / 2) / pageSize.height;\n//     const normalizedWidth = width / pageSize.width;\n//     const normalizedHeight = height / pageSize.height;\n\n//     return `${annotation.id} [${x_center.toFixed(4)}, ${y_center.toFixed(4)}, ${normalizedWidth.toFixed(4)}, ${normalizedHeight.toFixed(4)}]`;\n//   };\n\n//   const handleShowAnnotations = () => {\n//     setShowAnnotations(!showAnnotations);\n//     // setShowAnnotations((prevShowAnnotations) => !prevShowAnnotations);\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderContent={({ annotation }) => (\n//           <div>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <div>{getAnnotationYoloFormat(annotation)}</div>\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//       <button onClick={handleShowAnnotations}>{showAnnotations ? 'Hide Annotations' : 'Show Annotations'}</button>\n//       { (\n//         <div>\n//           <h2>All Annotations:</h2>\n//           <ul>\n//             {annotations.map((annotation) => (\n//               <li key={annotation.id}>{getAnnotationYoloFormat(annotation)}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n\n\n\n\n\n\n\n"],"mappings":"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AAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnE,CAAC;MAAA;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACDxC,WAAW,iBACVZ,OAAA;MAAAkC,QAAA,GAAK,iDAEH,EAACoB,IAAI,CAACC,SAAS,CAAC3C,WAAW,CAAC;IAAA;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClD,EAAA,CArEID,aAAa;AAAAuD,EAAA,GAAbvD,aAAa;AAuEnB,eAAeA,aAAa;;AAG5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}