{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/annotate.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import image from './as.png';\n\n// const ImageAnnotator = () => {\n//   const [boxes, setBoxes] = useState([]);\n//   const [startPoint, setStartPoint] = useState(null);\n\n//   const handleMouseDown = (e) => {\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n//     setStartPoint({ x, y });\n//   }\n\n//   const handleMouseUp = (e) => {\n//     if (!startPoint) return;\n\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n\n//     const newBox = {\n//       x: Math.min(startPoint.x, x),\n//       y: Math.min(startPoint.y, y),\n//       width: Math.abs(startPoint.x - x),\n//       height: Math.abs(startPoint.y - y),\n//     };\n\n//     setBoxes(prevBoxes => [...prevBoxes, newBox]);\n//     setStartPoint(null);\n//   }\n\n//   const [activeBox, setActiveBox] = useState(null);\n\n// const handleBoxClick = (boxIndex) => {\n//   setActiveBox(boxIndex);\n// };\n\n// const handleBoxDrag = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     x,\n//     y,\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// const handleBoxResize = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     width: Math.max(x - newBoxes[boxIndex].x, 10),\n//     height: Math.max(y - newBoxes[boxIndex].y, 10),\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// return (\n//   <div style={{ position: 'relative' }}>\n//     <img\n//       src={image}\n//       style={{ width: '100%' }}\n//       onMouseDown={handleMouseDown}\n//       onMouseUp={handleMouseUp}\n//     />\n\n//     {boxes.map((box, i) => (\n//       <div\n//         key={i}\n//         style={{\n//           position: 'absolute',\n//           border: '2px solid red',\n//           left: box.x,\n//           top: box.y,\n//           width: box.width,\n//           height: box.height,\n//           cursor: 'move',\n//         }}\n//         onClick={() => handleBoxClick(i)}\n//         onMouseDown={(e) => {\n//           e.stopPropagation();\n//           e.currentTarget.style.zIndex = '100';\n//         }}\n//         onMouseUp={(e) => {\n//           e.currentTarget.style.zIndex = 'auto';\n//         }}\n//         onMouseMove={(e) => {\n//           if (activeBox !== null) {\n//             handleBoxDrag(e, activeBox);\n//           }\n//         }}\n//       >\n//         <div\n//           style={{\n//             position: 'absolute',\n//             width: '10px',\n//             height: '10px',\n//             background: 'white',\n//             border: '2px solid red',\n//             right: 0,\n//             bottom: 0,\n//             cursor: 'se-resize',\n//           }}\n//           onMouseDown={(e) => {\n//             e.stopPropagation();\n//             e.currentTarget.style.zIndex = '100';\n//           }}\n//           onMouseUp={(e) => {\n//             e.currentTarget.style.zIndex = 'auto';\n//           }}\n//           onMouseMove={(e) => {\n//             if (activeBox !== null) {\n//               handleBoxResize(e, activeBox);\n//             }\n//           }}\n//         />\n//       </div>\n//     ))}\n//   </div>\n// );\n\n//   return (\n//     <div style={{ position: 'relative' }}>\n//       <img \n//         src={image} \n//         style={{ width: '100%' }} \n//         onMouseDown={handleMouseDown} \n//         onMouseUp={handleMouseUp} \n//       />\n\n//       {boxes.map((box, i) => (\n//         <div \n//           key={i}\n//           style={{\n//             position: 'absolute',\n//             border: '2px solid red',\n//             left: box.x,\n//             top: box.y,\n//             width: box.width,\n//             height: box.height,\n//           }}\n//         />\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotator;\n\n// import React, { useState, useCallback } from 'react';\n// import { Stage, Layer, Image, Line } from 'react-konva';\n// import useImage from 'use-image';\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [lines, setLines] = useState([]);\n//   const isDrawing = React.useRef(false);\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     // Add a new line with the initial point being the point where the mouse was clicked\n//     setLines([...lines, { points: [e.evt.x, e.evt.y], color: 'red' }]);\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     // Get the current line\n//     const currentLine = lines[lines.length - 1];\n//     // Append the current mouse position to the line's points\n//     currentLine.points = [...currentLine.points, e.evt.x, e.evt.y];\n//     // Replace the last line in the array\n//     const newLines = lines.slice(0, lines.length - 1);\n//     newLines.push(currentLine);\n//     setLines(newLines);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {lines.map((line, i) => (\n//           <Line\n//             key={i}\n//             points={line.points}\n//             stroke={line.color}\n//             strokeWidth={5}\n//             tension={0.5}\n//             lineCap=\"round\"\n//             globalCompositeOperation={\n//               line.color === 'red' ? 'source-over' : 'destination-out'\n//             }\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;\n\nimport React, { useState } from 'react';\nimport { Stage, Layer, Image, Rect } from 'react-konva';\nimport useImage from 'use-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnnotateImage = _ref => {\n  _s();\n  let {\n    imageUrl\n  } = _ref;\n  const [image] = useImage(imageUrl);\n  const [rectangles, setRectangles] = useState([]);\n  const isDrawing = React.useRef(false);\n  const handleMouseDown = e => {\n    isDrawing.current = true;\n    const x = e.evt.x;\n    const y = e.evt.y;\n    setRectangles([...rectangles, {\n      x,\n      y,\n      width: 0,\n      height: 0\n    }]);\n  };\n  const handleMouseMove = e => {\n    if (!isDrawing.current) {\n      return;\n    }\n    const currentRect = rectangles[rectangles.length - 1];\n    currentRect.width = e.evt.x - currentRect.x;\n    currentRect.height = e.evt.y - currentRect.y;\n    const newRectangles = rectangles.slice(0, rectangles.length - 1);\n    newRectangles.push(currentRect);\n    setRectangles(newRectangles);\n  };\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n  const handleRectTransform = (index, newProps) => {\n    const newRectangles = rectangles.slice();\n    newRectangles[index] = {\n      ...newRectangles[index],\n      ...newProps\n    };\n    setRectangles(newRectangles);\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        image: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), rectangles.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n        x: rect.x,\n        y: rect.y,\n        width: rect.width,\n        height: rect.height,\n        stroke: \"red\",\n        strokeWidth: 2,\n        draggable: true,\n        onTransformEnd: e => {\n          const node = e.target;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n          node.scaleX(1);\n          node.scaleY(1);\n          handleRectTransform(i, {\n            x: node.x(),\n            y: node.y(),\n            width: node.width() * scaleX,\n            height: node.height() * scaleY\n          });\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(AnnotateImage, \"J3xlF/8e9oLPLxiK0FhKBWDZhBE=\", false, function () {\n  return [useImage];\n});\n_c = AnnotateImage;\nexport default AnnotateImage;\nvar _c;\n$RefreshReg$(_c, \"AnnotateImage\");","map":{"version":3,"names":["React","useState","Stage","Layer","Image","Rect","useImage","jsxDEV","_jsxDEV","AnnotateImage","_ref","_s","imageUrl","image","rectangles","setRectangles","isDrawing","useRef","handleMouseDown","e","current","x","evt","y","width","height","handleMouseMove","currentRect","length","newRectangles","slice","push","handleMouseUp","handleRectTransform","index","newProps","window","innerWidth","innerHeight","onMouseDown","onMouseMove","onMouseUp","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rect","i","stroke","strokeWidth","draggable","onTransformEnd","node","target","scaleX","scaleY","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/annotate.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import image from './as.png';\n\n\n// const ImageAnnotator = () => {\n//   const [boxes, setBoxes] = useState([]);\n//   const [startPoint, setStartPoint] = useState(null);\n  \n//   const handleMouseDown = (e) => {\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n//     setStartPoint({ x, y });\n//   }\n\n//   const handleMouseUp = (e) => {\n//     if (!startPoint) return;\n\n//     const rect = e.target.getBoundingClientRect();\n//     const x = e.clientX - rect.left; \n//     const y = e.clientY - rect.top;\n\n//     const newBox = {\n//       x: Math.min(startPoint.x, x),\n//       y: Math.min(startPoint.y, y),\n//       width: Math.abs(startPoint.x - x),\n//       height: Math.abs(startPoint.y - y),\n//     };\n\n//     setBoxes(prevBoxes => [...prevBoxes, newBox]);\n//     setStartPoint(null);\n//   }\n\n//   const [activeBox, setActiveBox] = useState(null);\n\n// const handleBoxClick = (boxIndex) => {\n//   setActiveBox(boxIndex);\n// };\n\n// const handleBoxDrag = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     x,\n//     y,\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// const handleBoxResize = (e, boxIndex) => {\n//   const rect = e.currentTarget.getBoundingClientRect();\n//   const x = e.clientX - rect.left;\n//   const y = e.clientY - rect.top;\n\n//   const newBoxes = [...boxes];\n//   newBoxes[boxIndex] = {\n//     ...newBoxes[boxIndex],\n//     width: Math.max(x - newBoxes[boxIndex].x, 10),\n//     height: Math.max(y - newBoxes[boxIndex].y, 10),\n//   };\n\n//   setBoxes(newBoxes);\n// };\n\n// return (\n//   <div style={{ position: 'relative' }}>\n//     <img\n//       src={image}\n//       style={{ width: '100%' }}\n//       onMouseDown={handleMouseDown}\n//       onMouseUp={handleMouseUp}\n//     />\n\n//     {boxes.map((box, i) => (\n//       <div\n//         key={i}\n//         style={{\n//           position: 'absolute',\n//           border: '2px solid red',\n//           left: box.x,\n//           top: box.y,\n//           width: box.width,\n//           height: box.height,\n//           cursor: 'move',\n//         }}\n//         onClick={() => handleBoxClick(i)}\n//         onMouseDown={(e) => {\n//           e.stopPropagation();\n//           e.currentTarget.style.zIndex = '100';\n//         }}\n//         onMouseUp={(e) => {\n//           e.currentTarget.style.zIndex = 'auto';\n//         }}\n//         onMouseMove={(e) => {\n//           if (activeBox !== null) {\n//             handleBoxDrag(e, activeBox);\n//           }\n//         }}\n//       >\n//         <div\n//           style={{\n//             position: 'absolute',\n//             width: '10px',\n//             height: '10px',\n//             background: 'white',\n//             border: '2px solid red',\n//             right: 0,\n//             bottom: 0,\n//             cursor: 'se-resize',\n//           }}\n//           onMouseDown={(e) => {\n//             e.stopPropagation();\n//             e.currentTarget.style.zIndex = '100';\n//           }}\n//           onMouseUp={(e) => {\n//             e.currentTarget.style.zIndex = 'auto';\n//           }}\n//           onMouseMove={(e) => {\n//             if (activeBox !== null) {\n//               handleBoxResize(e, activeBox);\n//             }\n//           }}\n//         />\n//       </div>\n//     ))}\n//   </div>\n// );\n\n\n//   return (\n//     <div style={{ position: 'relative' }}>\n//       <img \n//         src={image} \n//         style={{ width: '100%' }} \n//         onMouseDown={handleMouseDown} \n//         onMouseUp={handleMouseUp} \n//       />\n\n//       {boxes.map((box, i) => (\n//         <div \n//           key={i}\n//           style={{\n//             position: 'absolute',\n//             border: '2px solid red',\n//             left: box.x,\n//             top: box.y,\n//             width: box.width,\n//             height: box.height,\n//           }}\n//         />\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotator;\n\n\n// import React, { useState, useCallback } from 'react';\n// import { Stage, Layer, Image, Line } from 'react-konva';\n// import useImage from 'use-image';\n\n// const AnnotateImage = ({ imageUrl }) => {\n//   const [image] = useImage(imageUrl);\n//   const [lines, setLines] = useState([]);\n//   const isDrawing = React.useRef(false);\n\n//   const handleMouseDown = (e) => {\n//     isDrawing.current = true;\n//     // Add a new line with the initial point being the point where the mouse was clicked\n//     setLines([...lines, { points: [e.evt.x, e.evt.y], color: 'red' }]);\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!isDrawing.current) {\n//       return;\n//     }\n//     // Get the current line\n//     const currentLine = lines[lines.length - 1];\n//     // Append the current mouse position to the line's points\n//     currentLine.points = [...currentLine.points, e.evt.x, e.evt.y];\n//     // Replace the last line in the array\n//     const newLines = lines.slice(0, lines.length - 1);\n//     newLines.push(currentLine);\n//     setLines(newLines);\n//   };\n\n//   const handleMouseUp = () => {\n//     isDrawing.current = false;\n//   };\n\n//   return (\n//     <Stage\n//       width={window.innerWidth}\n//       height={window.innerHeight}\n//       onMouseDown={handleMouseDown}\n//       onMousemove={handleMouseMove}\n//       onMouseup={handleMouseUp}\n//     >\n//       <Layer>\n//         <Image image={image} />\n//         {lines.map((line, i) => (\n//           <Line\n//             key={i}\n//             points={line.points}\n//             stroke={line.color}\n//             strokeWidth={5}\n//             tension={0.5}\n//             lineCap=\"round\"\n//             globalCompositeOperation={\n//               line.color === 'red' ? 'source-over' : 'destination-out'\n//             }\n//             draggable\n//           />\n//         ))}\n//       </Layer>\n//     </Stage>\n//   );\n// };\n\n// export default AnnotateImage;\n\nimport React, { useState } from 'react';\nimport { Stage, Layer, Image, Rect } from 'react-konva';\nimport useImage from 'use-image';\n\nconst AnnotateImage = ({ imageUrl }) => {\n  const [image] = useImage(imageUrl);\n  const [rectangles, setRectangles] = useState([]);\n  const isDrawing = React.useRef(false);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const x = e.evt.x;\n    const y = e.evt.y;\n    setRectangles([...rectangles, { x, y, width: 0, height: 0 }]);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isDrawing.current) {\n      return;\n    }\n    const currentRect = rectangles[rectangles.length - 1];\n    currentRect.width = e.evt.x - currentRect.x;\n    currentRect.height = e.evt.y - currentRect.y;\n\n    const newRectangles = rectangles.slice(0, rectangles.length - 1);\n    newRectangles.push(currentRect);\n    setRectangles(newRectangles);\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const handleRectTransform = (index, newProps) => {\n    const newRectangles = rectangles.slice();\n    newRectangles[index] = { ...newRectangles[index], ...newProps };\n    setRectangles(newRectangles);\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n    >\n      <Layer>\n        <Image image={image} />\n        {rectangles.map((rect, i) => (\n          <Rect\n            key={i}\n            x={rect.x}\n            y={rect.y}\n            width={rect.width}\n            height={rect.height}\n            stroke=\"red\"\n            strokeWidth={2}\n            draggable\n            onTransformEnd={(e) => {\n              const node = e.target;\n              const scaleX = node.scaleX();\n              const scaleY = node.scaleY();\n\n              node.scaleX(1);\n              node.scaleY(1);\n\n              handleRectTransform(i, {\n                x: node.x(),\n                y: node.y(),\n                width: node.width() * scaleX,\n                height: node.height() * scaleY,\n              });\n            }}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default AnnotateImage;\n\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,QAAQ,aAAa;AACvD,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,aAAa,GAAGC,IAAA,IAAkB;E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"},"metadata":{},"sourceType":"module","externalDependencies":[]}