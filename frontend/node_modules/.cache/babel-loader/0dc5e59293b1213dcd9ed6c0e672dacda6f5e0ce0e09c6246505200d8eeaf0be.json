{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageAnnotation = () => {\n  _s();\n  const {\n    requestID\n  } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const handleImageClick = async (image) => {\n  //   try {\n  //     const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify({\n  //         imageID: image.imageID\n  //       })\n  //     });\n  //     const data = await response.json();\n  //     setSelectedImage(data);\n  //     // console.log(data.annotations);\n  //     // handleAnnotationChange(data.annotations);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n\n  const handleImageClick = async image => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n\n      // Update annotations for annotated images\n      if (data.annotationStatus === 'Annotated') {\n        console.log('Fetched Annotations:', data.annotations); // Check the fetched annotations\n        const fetchedAnnotations = data.annotations[0]; // Extract the inner array\n        setAnnotations(fetchedAnnotations);\n        console.log('Updated Annotations:', annotations); // Check the updated state\n      } else {\n        setAnnotations([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleDoneClick = async () => {\n    console.log(annotations);\n    const hasUndefinedLabels = annotations.some(a => a.comment === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n      const updatedAnnotations = [...annotations];\n      const existingAnnotations = updatedAnnotations.find(a => a.imageID === selectedImage.imageID);\n      if (existingAnnotations) {\n        // Append new annotations to existing annotations\n        existingAnnotations.annotations.push(...selectedImage.annotations);\n      } else {\n        // Add new annotations for the image\n        updatedAnnotations.push({\n          imageID: selectedImage.imageID,\n          annotations: selectedImage.annotations\n        });\n      }\n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: updatedAnnotations\n      };\n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (response.ok) {\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image => image.imageID === selectedImage.imageID ? {\n              ...image,\n              status: 'Annotated'\n            } : image);\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n\n  // const handleDoneClick = async () => {\n  //   const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n  //   if (hasUndefinedLabels) {\n  //     alert('Please add all labels before submitting.');\n  //   } else {\n  //     // Perform logic to save selected labels for the selected image\n  //     console.log('Annotations:', annotations);\n\n  //     const requestBody = {\n  //       imageID: selectedImage.imageID,\n  //       annotations: annotations\n  //     };\n\n  //     try {\n  //       const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(requestBody)\n  //       });\n\n  //       if (response.ok) {\n  //         console.log(annotations.label);\n  //         console.log('Annotations sent successfully!');\n  //         // Update the image status to 'Annotated' in the local state\n  //         if (selectedImage) {\n  //           const updatedImages = images.map(image =>\n  //             image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n  //           );\n  //           setImages(updatedImages);\n  //         }\n  //       } else {\n  //         console.error('Failed to send annotations:', response.statusText);\n  //       }\n  //     } catch (error) {\n  //       console.error('Failed to send annotations:', error);\n  //     }\n  //   }\n  // };\n\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n  const handleAnnotationChange = updatedAnnotations => {\n    setAnnotations(updatedAnnotations);\n  };\n  const handleFilterChange = option => {\n    setFilterOption(option);\n  };\n  const filteredImages = filterOption === 'all' ? images : images.filter(image => image.status === filterOption);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-annotation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-filter\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filterOption,\n        onChange: e => handleFilterChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Unannotated\",\n          children: \"Unannotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Annotated\",\n          children: \"Annotated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), filteredImages.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`,\n        onClick: () => handleImageClick(image),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${image.imageThumbnail}`,\n          alt: `Image ${image.imageID}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), image.status === 'Unannotated' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-circle green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 15\n        }, this)]\n      }, image.imageID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-section\",\n      children: [selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-image\",\n        children: /*#__PURE__*/_jsxDEV(AnnotateImage, {\n          image: `data:image/jpeg;base64,${selectedImage.base64Image}`,\n          annotations: annotations,\n          onChangeAnnotations: handleAnnotationChange,\n          className: \"annotation-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-section\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Labels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"done-button\",\n          onClick: handleDoneClick,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: handleResetClick,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageAnnotation, \"+QsAauCEg9HNEhLXqNAIhow7dVU=\", false, function () {\n  return [useParams];\n});\n_c = ImageAnnotation;\nexport default ImageAnnotation;\nvar _c;\n$RefreshReg$(_c, \"ImageAnnotation\");","map":{"version":3,"names":["React","useState","useEffect","useParams","AnnotateImage","jsxDEV","_jsxDEV","ImageAnnotation","_s","requestID","images","setImages","selectedImage","setSelectedImage","annotations","setAnnotations","filterOption","setFilterOption","fetchImages","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","handleImageClick","image","imageID","annotationStatus","log","fetchedAnnotations","handleDoneClick","hasUndefinedLabels","some","a","comment","undefined","alert","updatedAnnotations","existingAnnotations","find","push","requestBody","ok","updatedImages","map","status","statusText","handleResetClick","handleAnnotationChange","handleFilterChange","option","filteredImages","filter","className","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","imageThumbnail","alt","base64Image","onChangeAnnotations","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/imageannotation.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './imageannotation.css';\n// import { useParams } from 'react-router-dom';\n// import AnnotateImage from './annotate';\n\n// const ImageAnnotation = () => {\n//   const { requestID } = useParams();\n//   const [images, setImages] = useState([]);\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   const [labels, setLabels] = useState([]);\n//   const [selectedLabels, setSelectedLabels] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch images from API\n//     fetchImages();\n//   }, [requestID]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageThumbnailsByRequestID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           requestID: requestID\n//         })\n//       });\n//       const data = await response.json();\n//       setImages(data.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleImageClick = async (image) => {\n//     try {\n//       const response = await fetch('http://10.2.136.111:5000/getImageByImageID', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           imageID: image.imageID\n//         })\n//       });\n//       const data = await response.json();\n//       setSelectedImage(data);\n//       setSelectedLabels([]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleLabelToggle = (label) => {\n//     const updatedSelectedLabels = selectedLabels.includes(label)\n//       ? selectedLabels.filter((selectedLabel) => selectedLabel !== label)\n//       : [...selectedLabels, label];\n\n//     setSelectedLabels(updatedSelectedLabels);\n//   };\n\n//   const handleDoneClick = () => {\n//     // Perform logic to save selected labels for the selected image\n//     console.log('Selected Labels:', selectedLabels);\n//   };\n\n//   const handleResetClick = () => {\n//     setSelectedLabels([]);\n//   };\n\n//   return (\n//     <div className=\"image-annotation-container\">\n//       <div className=\"image-list\">\n//         {images.map((image) => (\n//           <div\n//             key={image.imageID}\n//             className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n//             onClick={() => handleImageClick(image)}\n//           >\n//             <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"annotation-section\">\n//         {selectedImage && (\n//           <div className=\"selected-image\">\n//           <AnnotateImage image={`data:image/jpeg;base64,${selectedImage.base64Image}`} className=\"annotation-image\" />\n//           </div>\n//         )}\n\n//         <div className=\"label-section\">\n//           <h3>Labels</h3>\n//           {labels.map((label) => (\n//             <div\n//               key={label.id}\n//               className={`label ${selectedLabels.includes(label) ? 'selected' : ''}`}\n//               onClick={() => handleLabelToggle(label)}\n//             >\n//               {label.name}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"button-section\">\n//           <button className=\"done-button\" onClick={handleDoneClick}>Done</button>\n//           <button className=\"reset-button\" onClick={handleResetClick}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageAnnotation;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './imageannotation.css';\nimport { useParams } from 'react-router-dom';\nimport AnnotateImage from './annotate';\n\nconst ImageAnnotation = () => {\n  const { requestID } = useParams();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [annotations, setAnnotations] = useState([]);\n  const [filterOption, setFilterOption] = useState('all');\n\n  useEffect(() => {\n    // Fetch images from API\n    fetchImages();\n  }, [requestID]);\n\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageThumbnailsByRequestID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          requestID: requestID\n        })\n      });\n      const data = await response.json();\n      setImages(data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const handleImageClick = async (image) => {\n  //   try {\n  //     const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify({\n  //         imageID: image.imageID\n  //       })\n  //     });\n  //     const data = await response.json();\n  //     setSelectedImage(data);\n  //     // console.log(data.annotations);\n  //     // handleAnnotationChange(data.annotations);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n\n  const handleImageClick = async (image) => {\n    try {\n      const response = await fetch('http://10.2.8.173:5000/getImageByImageID', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageID: image.imageID\n        })\n      });\n      const data = await response.json();\n      setSelectedImage(data);\n      \n      // Update annotations for annotated images\n      if (data.annotationStatus === 'Annotated') {\n        console.log('Fetched Annotations:', data.annotations); // Check the fetched annotations\n        const fetchedAnnotations = data.annotations[0]; // Extract the inner array\n        setAnnotations(fetchedAnnotations);\n        console.log('Updated Annotations:', annotations); // Check the updated state\n      } else {\n        setAnnotations([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  \n  \n\n  const handleDoneClick = async () => {\n    console.log(annotations);\n    const hasUndefinedLabels = annotations.some(a => a.comment === undefined);\n    if (hasUndefinedLabels) {\n      alert('Please add all labels before submitting.');\n    } else {\n      // Perform logic to save selected labels for the selected image\n      console.log('Annotations:', annotations);\n  \n      const updatedAnnotations = [...annotations];\n      const existingAnnotations = updatedAnnotations.find(a => a.imageID === selectedImage.imageID);\n  \n      if (existingAnnotations) {\n        // Append new annotations to existing annotations\n        existingAnnotations.annotations.push(...selectedImage.annotations);\n      } else {\n        // Add new annotations for the image\n        updatedAnnotations.push({\n          imageID: selectedImage.imageID,\n          annotations: selectedImage.annotations\n        });\n      }\n  \n      const requestBody = {\n        imageID: selectedImage.imageID,\n        annotations: updatedAnnotations\n      };\n  \n      try {\n        const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n  \n        if (response.ok) {\n          console.log('Annotations sent successfully!');\n          // Update the image status to 'Annotated' in the local state\n          if (selectedImage) {\n            const updatedImages = images.map(image =>\n              image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n            );\n            setImages(updatedImages);\n          }\n        } else {\n          console.error('Failed to send annotations:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Failed to send annotations:', error);\n      }\n    }\n  };\n  \n  \n  \n\n  // const handleDoneClick = async () => {\n  //   const hasUndefinedLabels = annotations.some(a => a.label === undefined);\n  //   if (hasUndefinedLabels) {\n  //     alert('Please add all labels before submitting.');\n  //   } else {\n  //     // Perform logic to save selected labels for the selected image\n  //     console.log('Annotations:', annotations);\n      \n  //     const requestBody = {\n  //       imageID: selectedImage.imageID,\n  //       annotations: annotations\n  //     };\n\n  //     try {\n  //       const response = await fetch('http://10.2.8.173:5000/setAnnotations', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(requestBody)\n  //       });\n  \n  //       if (response.ok) {\n  //         console.log(annotations.label);\n  //         console.log('Annotations sent successfully!');\n  //         // Update the image status to 'Annotated' in the local state\n  //         if (selectedImage) {\n  //           const updatedImages = images.map(image =>\n  //             image.imageID === selectedImage.imageID ? { ...image, status: 'Annotated' } : image\n  //           );\n  //           setImages(updatedImages);\n  //         }\n  //       } else {\n  //         console.error('Failed to send annotations:', response.statusText);\n  //       }\n  //     } catch (error) {\n  //       console.error('Failed to send annotations:', error);\n  //     }\n  //   }\n  // };\n  \n  \n\n  const handleResetClick = () => {\n    setAnnotations([]);\n  };\n\n  const handleAnnotationChange = (updatedAnnotations) => {\n    setAnnotations(updatedAnnotations);\n  };\n\n  const handleFilterChange = (option) => {\n    setFilterOption(option);\n  };\n\n\n    \n  const filteredImages = filterOption === 'all' ? images : images.filter((image) => image.status === filterOption);\n\n  return (\n    <div className=\"image-annotation-container\">\n      <div className=\"image-filter\">\n        <select value={filterOption} onChange={(e) => handleFilterChange(e.target.value)}>\n          <option value=\"all\">All</option>\n          <option value=\"Unannotated\">Unannotated</option>\n          <option value=\"Annotated\">Annotated</option>\n        </select>\n      </div>\n      <div className=\"image-list\">\n        <br></br>\n        {filteredImages.map((image) => (\n          <div\n            key={image.imageID}\n            className={`image-thumbnail ${selectedImage && selectedImage.imageID === image.imageID ? 'selected' : ''}`}\n            onClick={() => handleImageClick(image)}\n          >\n            <img src={`data:image/jpeg;base64,${image.imageThumbnail}`} alt={`Image ${image.imageID}`} />\n            {image.status === 'Unannotated' ? (\n              <div className=\"button-circle red\"></div>\n            ) : (\n              <div className=\"button-circle green\"></div>\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"annotation-section\">\n        {selectedImage && (\n          <div className=\"selected-image\">\n            <AnnotateImage\n              image={`data:image/jpeg;base64,${selectedImage.base64Image}`}\n              annotations={annotations}\n              onChangeAnnotations={handleAnnotationChange}\n              className=\"annotation-image\"\n            />\n          </div>\n        )}\n\n      <div className=\"label-section\">\n        <h3>Labels</h3>\n\n      </div>\n           \n\n        <div className=\"button-section\">\n          <button className=\"done-button\" onClick={handleDoneClick}>\n            Done\n          </button>\n          <button className=\"reset-button\" onClick={handleResetClick}>\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageAnnotation;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}