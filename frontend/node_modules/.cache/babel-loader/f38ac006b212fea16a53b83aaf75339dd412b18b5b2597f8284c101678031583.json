{"ast":null,"code":"var _jsxFileName = \"/home/vishnapanyala/Desktop/myapp/src/components/annotate.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//     console.log(getYoloAnnotations(data));\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getYoloAnnotations = (data) => {\n//     return data\n//       .map(({ geometry, content }) => {\n//         if (!geometry) return ''; // Add null check for geometry\n\n//         const { x, y, width, height } = geometry;\n\n//         const normalizedX = x / pageSize.width;\n//         const normalizedY = y / pageSize.height;\n//         const normalizedWidth = width / pageSize.width;\n//         const normalizedHeight = height / pageSize.height;\n\n//         return `${content} ${normalizedX} ${normalizedY} ${normalizedWidth} ${normalizedHeight}`;\n//       })\n//       .join('\\n');\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\nimport React, { useState, useEffect } from 'react';\nimport { ReactPictureAnnotation } from 'react-picture-annotation';\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnnotateImage = () => {\n  _s();\n  const [pageSize, setPageSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [annotations, setAnnotations] = useState([]);\n  const onResize = () => {\n    setPageSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n  const onSelect = selectedId => console.log(selectedId);\n  const onChange = data => {\n    setAnnotations(data);\n    saveAnnotationsToFile(data);\n  };\n  const handleDeleteBox = id => {\n    const updatedAnnotations = annotations.filter(annotation => annotation.id !== id);\n    setAnnotations(updatedAnnotations);\n    saveAnnotationsToFile(updatedAnnotations);\n  };\n  const getAnnotationYoloFormat = annotation => {\n    const x_center = (annotation.position.x + annotation.position.width / 2) / pageSize.width;\n    const y_center = (annotation.position.y + annotation.position.height / 2) / pageSize.height;\n    const width = annotation.position.width / pageSize.width;\n    const height = annotation.position.height / pageSize.height;\n    return `${annotation.id} [${x_center.toFixed(4)}, ${y_center.toFixed(4)}, ${width.toFixed(4)}, ${height.toFixed(4)}]`;\n  };\n  const saveAnnotationsToFile = annotations => {\n    const yoloAnnotations = annotations.map(annotation => getAnnotationYoloFormat(annotation));\n    const content = yoloAnnotations.join('\\n');\n    fs.writeFile('/path/to/annotations.txt', content, err => {\n      if (err) {\n        console.error('Error saving annotations:', err);\n      } else {\n        console.log('Annotations saved to file successfully');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AnnotateImage\",\n    children: /*#__PURE__*/_jsxDEV(ReactPictureAnnotation, {\n      image: \"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n      ,\n      onSelect: onSelect,\n      onChange: onChange,\n      width: pageSize.width,\n      height: pageSize.height,\n      annotations: annotations,\n      renderContent: _ref => {\n        let {\n          annotation\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: annotation.content,\n            onChange: e => {\n              const updatedAnnotations = [...annotations];\n              const index = updatedAnnotations.findIndex(a => a.id === annotation.id);\n              updatedAnnotations[index].content = e.target.value;\n              setAnnotations(updatedAnnotations);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getAnnotationYoloFormat(annotation)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteBox(annotation.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(AnnotateImage, \"8zLjX9dyMLwzHq5VQt2GIRlCx2o=\");\n_c = AnnotateImage;\nexport default AnnotateImage;\nvar _c;\n$RefreshReg$(_c, \"AnnotateImage\");","map":{"version":3,"names":["React","useState","useEffect","ReactPictureAnnotation","fs","jsxDEV","_jsxDEV","AnnotateImage","_s","pageSize","setPageSize","width","window","innerWidth","height","innerHeight","annotations","setAnnotations","onResize","addEventListener","removeEventListener","onSelect","selectedId","console","log","onChange","data","saveAnnotationsToFile","handleDeleteBox","id","updatedAnnotations","filter","annotation","getAnnotationYoloFormat","x_center","position","x","y_center","y","toFixed","yoloAnnotations","map","content","join","writeFile","err","error","className","children","image","renderContent","_ref","type","value","e","index","findIndex","a","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/vishnapanyala/Desktop/myapp/src/components/annotate.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n// import React, { useState, useEffect } from 'react';\n// import { ReactPictureAnnotation } from 'react-picture-annotation';\n\n// const AnnotateImage = () => {\n//   const [pageSize, setPageSize] = useState({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   });\n//   const [annotations, setAnnotations] = useState([]);\n\n//   const onResize = () => {\n//     setPageSize({ width: window.innerWidth, height: window.innerHeight });\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener('resize', onResize);\n//     return () => window.removeEventListener('resize', onResize);\n//   }, []);\n\n//   const onSelect = (selectedId) => console.log(selectedId);\n\n//   const onChange = (data) => {\n//     setAnnotations(data);\n//     console.log(getYoloAnnotations(data));\n//   };\n\n//   const handleDeleteBox = (id) => {\n//     const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n//     setAnnotations(updatedAnnotations);\n//   };\n\n//   const getYoloAnnotations = (data) => {\n//     return data\n//       .map(({ geometry, content }) => {\n//         if (!geometry) return ''; // Add null check for geometry\n\n//         const { x, y, width, height } = geometry;\n\n//         const normalizedX = x / pageSize.width;\n//         const normalizedY = y / pageSize.height;\n//         const normalizedWidth = width / pageSize.width;\n//         const normalizedHeight = height / pageSize.height;\n\n//         return `${content} ${normalizedX} ${normalizedY} ${normalizedWidth} ${normalizedHeight}`;\n//       })\n//       .join('\\n');\n//   };\n\n//   return (\n//     <div className=\"AnnotateImage\">\n//       <ReactPictureAnnotation\n//         image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n//         onSelect={onSelect}\n//         onChange={onChange}\n//         width={pageSize.width}\n//         height={pageSize.height}\n//         annotations={annotations}\n//         renderAnnotation={({ annotation }) => (\n//           <div style={{ position: 'absolute', left: annotation.position.x, top: annotation.position.y }}>\n//             <input\n//               type=\"text\"\n//               value={annotation.content}\n//               onChange={(e) => {\n//                 const updatedAnnotations = [...annotations];\n//                 const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n//                 updatedAnnotations[index].content = e.target.value;\n//                 setAnnotations(updatedAnnotations);\n//               }}\n//             />\n//             <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n//           </div>\n//         )}\n//       />\n//     </div>\n//   );\n// };\n\n// export default AnnotateImage;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { ReactPictureAnnotation } from 'react-picture-annotation';\nimport fs from 'fs';\n\nconst AnnotateImage = () => {\n  const [pageSize, setPageSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [annotations, setAnnotations] = useState([]);\n\n  const onResize = () => {\n    setPageSize({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  const onSelect = (selectedId) => console.log(selectedId);\n\n  const onChange = (data) => {\n    setAnnotations(data);\n    saveAnnotationsToFile(data);\n  };\n\n  const handleDeleteBox = (id) => {\n    const updatedAnnotations = annotations.filter((annotation) => annotation.id !== id);\n    setAnnotations(updatedAnnotations);\n    saveAnnotationsToFile(updatedAnnotations);\n  };\n\n  const getAnnotationYoloFormat = (annotation) => {\n    const x_center = (annotation.position.x + annotation.position.width / 2) / pageSize.width;\n    const y_center = (annotation.position.y + annotation.position.height / 2) / pageSize.height;\n    const width = annotation.position.width / pageSize.width;\n    const height = annotation.position.height / pageSize.height;\n    return `${annotation.id} [${x_center.toFixed(4)}, ${y_center.toFixed(4)}, ${width.toFixed(4)}, ${height.toFixed(4)}]`;\n  };\n\n  const saveAnnotationsToFile = (annotations) => {\n    const yoloAnnotations = annotations.map((annotation) => getAnnotationYoloFormat(annotation));\n    const content = yoloAnnotations.join('\\n');\n    fs.writeFile('/path/to/annotations.txt', content, (err) => {\n      if (err) {\n        console.error('Error saving annotations:', err);\n      } else {\n        console.log('Annotations saved to file successfully');\n      }\n    });\n  };\n\n  return (\n    <div className=\"AnnotateImage\">\n      <ReactPictureAnnotation\n        image=\"https://encrypted-tbn1.gstatic.com/licensed-image?q=tbn:ANd9GcT7p48zgkqUyYDdx7AGnlWVOEh6vpc8QHHPh0mAtn_73_jD_etGCyAexD1ArARBsGl4HqZYyGjcpRJRo3A\" // Update the image URL\n        onSelect={onSelect}\n        onChange={onChange}\n        width={pageSize.width}\n        height={pageSize.height}\n        annotations={annotations}\n        renderContent={({ annotation }) => (\n          <div>\n            <input\n              type=\"text\"\n              value={annotation.content}\n              onChange={(e) => {\n                const updatedAnnotations = [...annotations];\n                const index = updatedAnnotations.findIndex((a) => a.id === annotation.id);\n                updatedAnnotations[index].content = e.target.value;\n                setAnnotations(updatedAnnotations);\n              }}\n            />\n            <div>{getAnnotationYoloFormat(annotation)}</div>\n            <button onClick={() => handleDeleteBox(annotation.id)}>Delete</button>\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n\nexport default AnnotateImage;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}